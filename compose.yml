name: roleplay-ai
volumes:
  mariadbdata: {}
  ollama: {}
  qdrant_storage: {}
  mongodata_db: {}
  mongodata_config: {}
  redis: {}
  open_webui: {}
  trained: {}
  hugging_face: {}
services:
  redis:
    image: redis
    ports:
      - '6379:6379'
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis:/data
  ollama:
    image: ollama/ollama
    ports:
      - '11434:11434'
    post_start:
      #- command: "echo \"FROM /trained/$LLM_MODEL.gguf\" > /trained/$LLM_MODEL/Modelfile"
      #- command: "ollama create $LLM_MODEL -f /trained/$LLM_MODEL/Modelfile"
      - command: "ollama cp mistral:instruct $LLM_MODEL_PLAY"
      - command: "ollama cp mistral:instruct $LLM_MODEL_SUMMARY"
      - command: "ollama run $LLM_MODEL_PLAY"
      - command: "ollama run $LLM_MODEL_SUMMARY"
    restart: always
    healthcheck:
      test: ["CMD", "ollama", "ps"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      OLLAMA_KEEP_ALIVE: -1
    env_file:
      - .env
    volumes:
      - ollama:/root/.ollama
      - trained:/trained
  qdrant:
    image: qdrant/qdrant
    ports:
      - '6333:6333'
      - '6334:6334'
    restart: always
    healthcheck:
      test: ["CMD", "echo", "0"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - qdrant_storage:/qdrant/storage
  mariadb:
    image: mariadb
    ports:
      - '3306:3306'
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: example
    healthcheck:
      test: ["CMD", "echo", "0"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mariadbdata:/var/lib/mysql
  mongo:
    image: mongo
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    healthcheck:
      test: ["CMD", "echo", "0"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mongodata_db:/data/db
      - mongodata_config:/data/configdb
  app:
    build:
      dockerfile: App/Dockerfile
      no_cache: true
    env_file:
      - .env
    restart: always
    ports:
      - '8000:80'
    healthcheck:
      test: ["CMD", "curl", "http://0.0.0.0"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      mariadb:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
  open-webui:
    image: ghcr.io/open-webui/open-webui:ollama
    ports:
      - '8080:3000'
    environment:
      OLLAMA_BASE_URL: "http://ollama:11434"
    volumes:
      - open_webui:/app/backend/data
    depends_on:
      ollama:
        condition: service_healthy
  ui:
    build:
      dockerfile: Ui/Dockerfile
      no_cache: true
    restart: always
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "http://0.0.0.0"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '80:80'
  training:
    build:
      dockerfile: Training/Dockerfile
      no_cache: true
    env_file:
      - .env
    volumes:
      - trained:/trained
      - hugging_face:/hugging_face_cache
    runtime: nvidia
    environment:
      HF_HOME: /hugging_face_cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
              - gpu