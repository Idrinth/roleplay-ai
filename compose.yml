name: roleplay-ai
volumes:
  mariadb_data: {}
  qdrant_storage: {}
  mongodata_db: {}
  mongodata_config: {}
  redis: {}
  grafana_storage: {}
  prometheus_storage: {}
  llama: {}
  promtail_log: {}
services:
  loki:
    image: grafana/loki:latest
    healthcheck:
      test: [ "CMD", "echo", "0" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1:3100:3100"
    depends_on:
      promtail:
        condition: service_healthy
  promtail:
    image: grafana/promtail:latest
    volumes:
      - promtail_log:/var/log
    healthcheck:
      test: [ "CMD", "echo", "0" ]
      interval: 10s
      timeout: 5s
      retries: 5
  grafana:
    build:
      dockerfile: Grafana/Dockerfile
      no_cache: true
    restart: always
    ports:
      - '127.0.0.1:8012:3000'
    environment:
      GF_SERVER_ROOT_URL: "https://grafana.bjoern-buettner.me/"
    healthcheck:
      test: [ "CMD", "echo", "0" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - grafana_storage:/var/lib/grafana
    depends_on:
      loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      mariadb:
        condition: service_healthy
  prometheus:
    build:
      dockerfile: Prometheus/Dockerfile
      no_cache: true
    healthcheck:
      test: [ "CMD", "echo", "0" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - prometheus_storage:/prometheus
    depends_on:
      app:
        condition: service_healthy
  redis:
    image: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: loki
      options:
        loki-url: http://loki:3100/loki/api/v1/push
    depends_on:
      loki:
        condition: service_healthy
    volumes:
      - redis:/data
  llama:
    image: ghcr.io/ggml-org/llama.cpp:server
    restart: always
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: 15
    healthcheck:
      test: [ "CMD", "echo", "0" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: "-hf $LLM_MODEL --port 8000 -n 16384"
    env_file:
      - .env
    volumes:
      - llama:/models
    logging:
      driver: loki
      options:
        loki-url: http://loki:3100/loki/api/v1/push
    depends_on:
      loki:
        condition: service_healthy
  qdrant:
    image: qdrant/qdrant
    restart: always
    healthcheck:
      test: ["CMD", "echo", "0"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - qdrant_storage:/qdrant/storage
    logging:
      driver: loki
      options:
        loki-url: http://loki:3100/loki/api/v1/push
    depends_on:
      loki:
        condition: service_healthy
  mariadb:
    image: mariadb
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: example
    healthcheck:
      test: ["CMD", "echo", "0"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mariadb_data:/var/lib/mysql
    logging:
      driver: loki
      options:
        loki-url: http://loki:3100/loki/api/v1/push
    depends_on:
      loki:
        condition: service_healthy
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    healthcheck:
      test: ["CMD", "echo", "0"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mongodata_db:/data/db
      - mongodata_config:/data/configdb
    logging:
      driver: loki
      options:
        loki-url: http://loki:3100/loki/api/v1/push
    depends_on:
      loki:
        condition: service_healthy
  app:
    build:
      dockerfile: App/Dockerfile
      no_cache: true
    env_file:
      - .env
    restart: always
    ports:
      - '127.0.0.1:8000:80'
    healthcheck:
      test: ["CMD", "curl", "http://0.0.0.0"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: loki
      options:
        loki-url: http://loki:3100/loki/api/v1/push
    depends_on:
      loki:
        condition: service_healthy
      llama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      mariadb:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
  ui:
    build:
      dockerfile: Ui/Dockerfile
      no_cache: true
    restart: always
    logging:
      driver: loki
      options:
        loki-url: http://loki:3100/loki/api/v1/push
    depends_on:
      loki:
        condition: service_healthy
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "http://0.0.0.0"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '127.0.0.1:8080:80'